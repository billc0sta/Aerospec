
reverseArray(arr) -> (i<#arr; ; arr.(#arr - i - 1))

thirdsBecome42(arr) ->
    result = (0 < i < #arr; ; | (i % 3 == 0) ? 42 | arr.i)
    result

quantumSwap(arr, i, j) ->
    temp = arr.i
    arr.i = arr.j
    arr.j = temp
    arr

primeIndexesMultiply(arr) ->
    isPrime(n) ->
        | n < 2 ? 0 
        | (2 < i < n; ; n % i == 0) ? 0 : 1
    result = (0 < i < #arr; ; isPrime(i) ? arr.i * 13 : arr.i)
    result

paradoxicalRecursion(arr, i) ->
    | i < 0 || i >= #arr ? arr 
    | arr.i = paradoxicalRecursion(arr, arr.i)
    arr

loopingArray(arr, i) ->
    arr.(i % #arr)

multByNext(arr) ->
    result = (0 < i < #arr - 1; ; arr.i * arr.(i + 1))
    result + (| #arr > 1 ? arr.(#arr - 1) | 0)

dimensionHop(arr) ->
    result = (0 < i < #arr; ; arr.(i < j < #arr; ; arr.(i + j) % #arr))
    result