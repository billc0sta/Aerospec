# Language Syntax

program          = (statement | comment)*
statement        = ifstmt | loop | print | input | block | return | break | continue | exprstmt
ifstmt           = '??' expression statement ('::' statement)?
expression       = assignexpr
assignexpr       = ident (('=' | ":=") ifexpr)* | ifexpr 
ifexpr           = logic ('?' ifexpr ':' ifexpr)?
logic_or         = equality ( "||" equality)*
logic_and        = equality ( "&&" equality)*
equality         = relation (("==" | "!=") relation)*
relation         = basic ((">" | "<" | ">=" | "<=") basic)*
basic            = factor (("+" | "-") factor)*
factor           = unary (("*" | "/" | "%") unary)*
unary            = ("!" | "+" | "-" | "#" | "~") unary | postary
postary          = primary ((arguments) | (indexing))*
arguments        = '(' (expression (',' expression)*)? ')'
indexing         = '[' (expression | (arr-range)) (',' (expression | arr-range))? ']'
arr-range        = (expression)? ':' (expression)?
primary          = ident | float | string | array | prototype | grouping | lambda | builder
ident            = (alphabet | '_') (alphabet | '_' | digit)*
alphabet         = ('a'->'z' | 'A->Z')
digit            = '0'->'9'
float            = number ('.' number)?
number           = (digit)+
array            = '[' (expression (',' expression)*)? ']'
range            = expression range-op ident range-op expression
range-op         = '>' | '>=' | '<' | '<='
string           = '"' (writable)* '"'
writable         = ' ' -> '~'
grouping         = '(' expression ')'
lambda           = "->" "(" ident ("," ident)* ")" block
builder          = '[' (range)? ';' (expression)? ';' expression ']'
prototype        = '{' (ident ('=' | ':=') expression)* '}'
loop             = ">>" expression statement
block            = '{' (statement)* '}'
print            = '@' expression
input            = '$'
exprstmt         = expression
return           = "->" (expression)?
break            = "**"
continue         = "<<"
comment          = "//" writable*